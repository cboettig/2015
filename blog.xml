<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head prefix="dc: http://purl.org/dc/terms/ og: http://ogp.me/ns#"> <!-- namespaces used in metadata.html -->
  <meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
  <title>Atom Feed</title>
  <meta name="author" content="Carl Boettiger" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <!-- HTML5 metadata -->
<meta name="keywords" content="" />
<meta name="description" content="" />
<!-- RDFa Metadata (in DublinCore) -->
<meta property="dc:title" content="Atom Feed" />
<meta property="dc:creator" content="Carl Boettiger" />
<meta property="dc:date" content="" />
<meta property="dc:format" content="text/html" />
<meta property="dc:language" content="en" />
<meta property="dc:identifier" content="/blog.xml" />
<meta property="dc:rights" content="CC0" />
<meta property="dc:source" content="Lab Notebook" />
<meta property="dc:subject" content="Ecology" /> 
<meta property="dc:type" content="website" /> 
<!-- RDFa Metadata (in OpenGraph) -->
<meta property="og:title" content="Atom Feed" />
<meta property="og:author" content="http://www.carlboettiger.info/index.html#me" />  <!-- Should be Liquid? URI? -->
<meta property="http://ogp.me/ns/profile#first_name" content="Carl"/>
<meta property="http://ogp.me/ns/profile#last_name" content="Boettiger"/>
<meta property="http://ogp.me/ns/article#published_time" content="" />
<meta property="og:site_name" content="Lab Notebook" /> <!-- Same as dc:source? -->
<meta property="og:url" content="http://www.carlboettiger.info/blog.xml" />
<meta property="og:type" content="website" /> 
<!-- Google Scholar Metadata -->
<!--
<meta name="citation_author" content="Carl Boettiger"/>
<meta name="citation_date" content=""/>
<meta name="citation_title" content="Atom Feed"/>
<meta name="citation_journal_title" content="Lab Notebook"/>
-->
<!--NOTE: see also the COinS Metadata in span element in footer -->




	<link rel="stylesheet" href="http://www.carlboettiger.info/assets/css/bootstrap.min.css" type="text/css"/>
	<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css">
	<link rel="stylesheet" href="http://www.carlboettiger.info/assets/css/academicons.css" />
  <!-- Help the browser identify the RSS feed automatically -->
  <link rel="alternate" type="application/rss+xml" title="Carl Boettiger's Lab Notebook" href="http://www.carlboettiger.info/blog.xml" />
</head>


  <body prefix="dc: http://purl.org/dc/terms/ foaf: http://xmlns.com/foaf/0.1/"> 
    <!-- Navbar  ================================================== -->

<nav class="navbar navbar-default" role="navigation">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="/README.html"><i class="icon-info-sign"></i></a>
    </div>

 <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav">

          <li  >
          <a href="/index.html">Home</a></li>
          <li  >
          <a href="/vita.html">Vita</a></li>
          <li  >
          <a href="/research.html">Research</a></li>
          <li  >
          <a href="/teaching.html">Teaching</a></li>
          <li  >
          <a href="/community.html">Community</a></li>
          <li  >
          <a href="/lab-notebook.html">Lab Notebook</a></li>

        </ul>

      <!-- Search site using Google's index -->
        <form class="navbar-form navbar-right" role="search" method="get" action="http://google.com/search">
          <div class="form-group">
            <input type="hidden" name="q" value="site:carlboettiger.info" />
            <input type="text" class="form-control search-query" name="q" placeholder="Search"/>
          </div>
          <button class="btn btn-mini" type="submit"><i class="icon-search"></i></button> 
       </form>

    </div><!--/.nav-collapse -->
  </div> <!-- /container -->
</nav>



    <div class="container"> <!-- Responsive grid layout, doesn't jump to full-width --> 
      <header>
        <h1 class="entry-title">Atom Feed</h1>
        <h2></h2>
      </header>

      <div class="row">
  <div class="col-md-8 col-md-offset-1">
    <article>
    <?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Lab Notebook - blog</title>
 <link href="//blog.xml" rel="self"/>
 <link href="/"/>
 <updated>2015-03-17T23:21:47+00:00</updated>
 <id>http://www.carlboettiger.info/</id>
 <author>
   <name>Carl Boettiger</name>
   <email>cboettig@gmail.com</email>
 </author>

 
 <entry>
   <title>Question-and-Answer-post on my use of Docker in research</title>
	 <link href="//02/24/docker-science-question-and-answer.html"/>
   <updated>2015-02-24T00:00:00+00:00</updated>
   <id>/02/24/docker-science-question-and-answer</id>
   <content type="html">&lt;p&gt;I received an interesting email from an academic computing unit regarding the use of Docker in my research:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We’ve been reading, listing, and prototyping best practices for building base images, achieving image composition, addressing interoperability, and standardizing on common APIs. When I read your paper, I thought you might have some opinions on the subject.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Would you be willing to share your experiences using Docker for research with our team? It doesn’t have to be a formal presentation. In fact, we generally prefer interactive conversations over slides, abstracts, etc. I appreciate that you must be terribly busy with your postdoc fellowship and rOpenScience responsibilities. If you’re not able to speak, perhaps you can answer a few questions about your use of Docker.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are some quick answers in reply; though like the questions themselves my replies are on the technical end and don’t give a useful overview of how I’m actually using Docker. Maybe that’s a subject for another post some time.&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Are you currently still using Docker for your research? If so, how are you integrating that into your more demanding computational needs?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Yes. Docker helps me quickly provision and deploy a temporary compute environment on a cloud server with resources appropriate to the computation. This model much more accurately reflects the nature of computational research in a discipline such as ecology than does the standard HPC cluster model. My research typically involves many different tasks that can be easily separated and do not need the specialized architecture of a supercomputer, but do rely on a wide range of existing software tools and frequently also rely on internet connectivity for accessing certain data resources, etc. Because Docker makes it very easy for me to deploy customized software environments locally and on cloud computing resources, it facilitates my process of testing, scaling and distributing tasks to the appropriate computational resources quickly, while also increasing the portability &amp;amp; reproducibility of my work by colleagues who can benefit from the prebuilt environment provided by the container.&lt;/p&gt;
&lt;ol start=&quot;2&quot; type=&quot;1&quot;&gt;
&lt;li&gt;How/do you make use of data containers?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I rarely make use of data containers. I find they, and container orchestration more generally, are very well suited for deploying a service app (such as an API), but are less natural for composing scientific research environments which requires orchestrating volumes instead of tcp links. For instance, at present, there is no interface in &lt;code&gt;--volumes-from&lt;/code&gt; to mount the shared volume at a different mount point in the different container. Thus one cannot just link libraries from different containers with a &lt;code&gt;-v /usr/lib&lt;/code&gt; or &lt;code&gt;-v /usr/bin&lt;/code&gt;, as this would clobber the existing libraries.&lt;/p&gt;
&lt;p&gt;Also, it’s rather a nuisance that on the current Debian/Ubuntu kernels at least, &lt;code&gt;docker rm&lt;/code&gt; does not fully clean up space from data containers (though we now have &lt;code&gt;docker rm -v&lt;/code&gt;)&lt;/p&gt;
&lt;ol start=&quot;3&quot; type=&quot;1&quot;&gt;
&lt;li&gt;What are you using to run your containers in production?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Production is a diverse notion in scientific research – from a software perspective scientific work is almost 100% development and 0% production. For containers running public, always-on services, I tend to run from a dedicated, appropriately resourced cloud server such as Digital Ocean. I don’t write such services very often (though we have been doing this to deploy public APIs for data recently), so this is the closest I get to ‘production’. I run my development environment and all my research code out of containers as well, both locally and on various cloud servers.&lt;/p&gt;
&lt;p&gt;In all cases, I tend to run containers using the Docker CLI. I’ve found fig places larger resource requirements to run the same set of containers – so much so that it will fail to start on a machine that can run the containers fine from CLI or Fleet. fig also feels immature; it does not provide anything close to parity with the Docker CLI options.&lt;/p&gt;
&lt;p&gt;Further, while I find orchestration a powerful concept that is well suited for certain use-cases (our recent API uses five containers), for many academic research uses I find that orchestration is both unnecessary and a barrier to use. Orchestration works really well for professionally designed, web native, open source stack: our recent API deployment uses Redis, MySQL, NGINX, Sinatra, Unicorn, Logstash, ElasticSearch and Kibana – services that are all readily composed from official Docker containers into an existing application. Most scientific work looks nothing like this – the common elements tend to be shared libraries that are not well adapted to the same abstraction into separate services.&lt;/p&gt;
&lt;ol start=&quot;4&quot; type=&quot;1&quot;&gt;
&lt;li&gt;How are you sharing them aside from the Docker Hub?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Primarily through making the Dockerfiles available on Github. This makes it easy for others to build the images locally, and also fork and modify the Dockerfile directly. I maintain a private Docker registry as well but rarely have need for it.&lt;/p&gt;
&lt;ol start=&quot;5&quot; type=&quot;1&quot;&gt;
&lt;li&gt;Do you have practical experience and advice about achieving real portability with Docker across hosting environments (ie. stick with X as an OS, use a sidekick and data container for data backups and snapshotting, etc)?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Overall this hasn’t been much of an issue. Sharing volumes with the host machine on hosts that require virtualization/boot2docker was an early problem, though this has been much better since Docker 1.3. In a similar vein, getting &lt;code&gt;boot2docker&lt;/code&gt; running on older hardware can be problematic. And of course docker isn’t really compatible with 32 bit machines.&lt;/p&gt;
&lt;p&gt;After spending some time with CoreOS, I tend to use Ubuntu machines when running in the cloud: ‘highly available’ isn’t much of a priority in the research context, where few things are at a scale where hardware failure is an issue. I found CoreOS worked poorly on individual machines or cluster sizes that might shrink below 2; while the new OS model was a barrier to entry for myself and for collaborators. I suspect this situation will improve dramatically as these tools gain polish and abstraction that requires less manual tooling for common patterns (I find that ambassador containers, sidekick containers, etc place too many OS-level tasks on the shoulders of the user). Of course there is a large ecosystem of solutions in this space, which also needs time to harden into standards.&lt;/p&gt;
&lt;p&gt;Perhaps my comments re: CLI vs fig in Q3 are also relevant here?&lt;/p&gt;
&lt;ol start=&quot;6&quot; type=&quot;1&quot;&gt;
&lt;li&gt;Have the computational requirements of your research codes outgrown a physical node?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Not at the present. I’ve run prior work on clusters on a campus and at the DOE’s Carver machine at NERSC, though at this time I can almost always meet computational needs with the larger single instances of a service like EC2 or DigitalOcean. Much more often I have the need to run many different codes (sometimes related things that could be parallelized in a single command but are better off distributed, but much more often unrelated tasks) at the same time. Being able to deploy these in isolated, pre-provisioned environments on one or multiple machines using Docker has thus been a huge gain in both my efficiency and realized computational performance. If any particular task becomes too intensive, Docker makes it very easy to move over to a new cloud instance with more resources that will not interfere with other tasks.&lt;/p&gt;
&lt;ol start=&quot;7&quot; type=&quot;1&quot;&gt;
&lt;li&gt;Do you have a workflow for versioning and releasing images comparable to GitFlow?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Nope, though maybe this would be a good idea. I work almost exclusively with automated builds and hardly ever use &lt;code&gt;docker commit&lt;/code&gt;. Though the Dockerfiles themselves are versioned, obviously the software that is installed between different automated builds can differ substantially, and there is in general no way to recover an earlier build. Using a &lt;code&gt;docker commit&lt;/code&gt; workflow instead would provide this more versioned history and greater stability of the precise binaries installed, but also feels more like a black box as the whole thing cannot then be reproduced from scratch.&lt;/p&gt;
&lt;ol start=&quot;8&quot; type=&quot;1&quot;&gt;
&lt;li&gt;Do you version your Dockerfile/image/source code separately?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I version all my Dockerfiles with git. I version my images as needed but more rarely, and in a way that reflects the version of the predominant software they install (e.g. r-base:3.1.2).&lt;/p&gt;
&lt;ol start=&quot;9&quot; type=&quot;1&quot;&gt;
&lt;li&gt;Do you prefer using the entrypoint or command to run your containers by default?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I prefer command (&lt;code&gt;CMD&lt;/code&gt;), as it is more semantic, easier to alter the default and can take longer strings (no need for a flag).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Notebook Maintenance And Scaling</title>
	 <link href="//01/01/notebook-maintenance-and-scaling.html"/>
   <updated>2015-01-01T00:00:00+00:00</updated>
   <id>/01/01/notebook-maintenance-and-scaling</id>
   <content type="html">&lt;p&gt;Electronic notebooks may not run out of pages like a paper notebook, but with five years of entries (963 posts, with a repository size approaching half a gigabyte), together with various files, layouts, experimentation and version history, some thought must be given to scale. Two closely related considerations add to this further: dynamic builds with &lt;code&gt;knitr&lt;/code&gt; from &lt;code&gt;.Rmd&lt;/code&gt; versions and hosting image files directly in the notebook repository rather than uploading to an external site (previously flickr or on the gh-pages of other project repositories). This has several advantages (more on that later) but in the immediate term it makes building the repository potentially slower (though knitr’s caching helps) and increases the repository size more rapidly (even with text-based &lt;code&gt;svg&lt;/code&gt; images).&lt;/p&gt;
&lt;p&gt;The current Jekyll system keeps all posts in a single repository and rebuilds the HTML files for each every time. This is already showing some strains: for instance, for some reason the git hashes when generating the site automatically on Travis cease updating for older posts, though this problem doesn’t occur when building locally. Overall, the Jekyll platform is rather snappy so this isn’t an unmanageable size, but is sufficient to demonstrate that the approach isn’t able to scale indefinitely either.&lt;/p&gt;
&lt;p&gt;So, as with the paper notebook whose pages are filled, it’s time to crack open a new binding and shelve the old notebooks – somewhere handy to be sure, but no longer one voluminous tome on the desk.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;/2015/assets/figures/posts/2015-01-01/notebooks-shelf.jpg&quot; /&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;a-multi-repository-approach&quot;&gt;A multi-repository approach&lt;/h2&gt;
&lt;p&gt;To address this, I’m am trying out breaking the notebook over multiple repositories: using a new repository for each year’s worth of entries, and an additional repository to provide the basic pages (&lt;code&gt;home&lt;/code&gt;, &lt;code&gt;teaching&lt;/code&gt;, &lt;code&gt;vita&lt;/code&gt;, etc. from the navbar) along with the assets used by all the other sites (css, fonts, javascript, etc). This avoids rebuilding the posts of notebooks from all previous years every time the Jekyll site is compiled, keeping the repositories smaller, the site more modular and more easy to scale.&lt;/p&gt;
&lt;p&gt;This raises some challenges such as keeping the layout and appearance consistent without maintaining copies of layout files across multiple repositories; managing URLs and paths across different repositories, and aggregating metadata (posts, tags, categories).&lt;/p&gt;
&lt;h2 id=&quot;repos-paths-and-urls-for-the-multi-notebook&quot;&gt;Repos, Paths, and URLs for the multi-notebook&lt;/h2&gt;
&lt;p&gt;Even with the source files (such as &lt;code&gt;.md&lt;/code&gt; entries, templates, etc.) in different repositories it would be simple enough to combine the generated HTML files from each repository into a single output directory serving the site (on Github or elsewhere). However, GitHub’s &lt;code&gt;gh-pages&lt;/code&gt; provide an elegantly more modular way to do this already. GitHub uses the URL of the user’s repository (the repo named &lt;code&gt;username.github.io&lt;/code&gt;, which also serves as the site URL unless a different domain is specified using a CNAME file) as the root domain for all other &lt;code&gt;gh-pages&lt;/code&gt; branches on the Github repo.&lt;/p&gt;
&lt;p&gt;Thus, I have created repositories named &lt;code&gt;2015&lt;/code&gt;, &lt;code&gt;2014&lt;/code&gt;, etc, which will serve the notebooks for the corresponding year from their own &lt;code&gt;gh-pages&lt;/code&gt; branch. Moving my &lt;code&gt;www.carlboettiger.info&lt;/code&gt; (the use of a subdomain such as &lt;code&gt;www&lt;/code&gt; is required in order to benefit from Github’s CDN, though if it is omitted the domain provider will add it) from my &lt;code&gt;labnotebook&lt;/code&gt; repo to my &lt;code&gt;cboettig.github.io&lt;/code&gt; repository means that the annual repositories now have base URLs such as &lt;code&gt;www.carlboettiger.info/2015&lt;/code&gt;, &lt;code&gt;www.carlboettiger.info/2014&lt;/code&gt;. Adjusting the &lt;code&gt;_config.yml&lt;/code&gt; to omit &lt;code&gt;/year:&lt;/code&gt; from the permalink, since it is already in the base URL, is all that is needed to ensure that the posts of all my old URLs will still resolve to the same pages. Excellent.&lt;/p&gt;
&lt;p&gt;Dealing with the site pages is more tricky than dealing with the posts. Pages come in two variates: some, like &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;research.html&lt;/code&gt;, &lt;code&gt;vita.html&lt;/code&gt;, contain only content that is independent of whatever is in the notebook pages and thus can live quite happily in the &lt;code&gt;cboettig.github.io&lt;/code&gt; repository. Others, like &lt;code&gt;tags.html&lt;/code&gt;, &lt;code&gt;categories.html&lt;/code&gt;, &lt;code&gt;archive.html&lt;/code&gt;, &lt;code&gt;lab-notebook.html&lt;/code&gt;, &lt;code&gt;atom.xml&lt;/code&gt; and other tag-specific RSS feeds are dynamically generated by Jekyll using the metadata of the posts, and thus need to live in the individual notebook repositories instead.&lt;/p&gt;
&lt;p&gt;This instead of just having the page: &lt;a href=&quot;http://carlboettiger.info/tags&quot;&gt;carlboettiger.info/tags&lt;/a&gt;, each year begins a new notebook with it’s own tags, categories, etc: &lt;a href=&quot;http://carlboettiger.info/2014/tags&quot;&gt;carlboettiger.info/2014/tags&lt;/a&gt;, &lt;a href=&quot;http://carlboettiger.info/2013/tags&quot;&gt;carlboettiger.info/2013/tags&lt;/a&gt;. For tags, categories,it makes some sense to have this information aggregated by year, avoiding the clutter of too many or too stale tags or categories (though perhaps something is lost by not being able to see this in aggregate across all years, at least not without some effort). Likewise for the list of posts by date (previously at &lt;code&gt;archive.html&lt;/code&gt;, now just turned into &lt;code&gt;index.html&lt;/code&gt;) is produced for each annual notebook, such that &lt;a href=&quot;http://carlboettiger.info/2014&quot;&gt;carlboettiger.info/2014&lt;/a&gt; resolves a reverse-chronological list of posts for that year alone.&lt;/p&gt;
&lt;p&gt;I must then address what to do about the original URLs such as &lt;a href=&quot;http://carlboettiger.info/tags&quot;&gt;carlboettiger.info/tags&lt;/a&gt;. Using a Jekyll liquid filter it is easy to define automatic redirects for &lt;code&gt;/tags.html&lt;/code&gt; and &lt;code&gt;/categories.html&lt;/code&gt; that will forward to the current year’s tag’s and categories, though perhaps an aggregated view would be preferable. For &lt;a href=&quot;http://carlboettiger.info/archive&quot;&gt;carlboettiger.info/archive&lt;/a&gt; I have provided manual links to the index of each annual notebook rather than a redirect to the index of only the most current notebook. Likewise for one of my most popular pages, &lt;a href=&quot;http://carlboettiger.info/lab-notebook&quot;&gt;carlboettiger.info/lab-notebook&lt;/a&gt;, I have retained the automated feeds from Github, Twitter, and Mendeley, but replaced the previews of the most recent posts with the less aesthetic link to the notebook by year. Meanwhile, I have provided each notebook with it’s own nine-panel preview page such as &lt;a href=&quot;http://carlboettiger.info/2014/lab-notebook&quot;&gt;carlboettiger.info/2014/lab-notebook&lt;/a&gt;, which has the preview but not the network feeds (Perhaps it would be better to move this to the index page). In this way, the social feeds can be updated merely by updating the &lt;code&gt;cboettig.github.io&lt;/code&gt; repo (since these are rendered as static text rather than javascript, written using the relevant API at the time the site is built.)&lt;/p&gt;
&lt;p&gt;A more tricky case is that of the atom feeds. It doesn’t really make sense to subscribe to a &lt;code&gt;carlboettiger.info/2015/blog.xml&lt;/code&gt; feed that will be inactive in a year. Using HTML redirects in a &lt;code&gt;.xml&lt;/code&gt; file doesn’t make too much sense, so I will try the RSS-flavor redirect:&lt;/p&gt;
&lt;pre class=&quot;sourceCode xml&quot;&gt;&lt;code class=&quot;sourceCode xml&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;newLocation&amp;gt;&lt;/span&gt;
http://www.carlboettiger.info/2015/blog.xml
&lt;span class=&quot;kw&quot;&gt;&amp;lt;/newLocation&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;though this seems less than ideal.&lt;/p&gt;
&lt;h2 id=&quot;automated-deploy&quot;&gt;Automated deploy&lt;/h2&gt;
&lt;p&gt;As I use the &lt;code&gt;jeykll-pandoc&lt;/code&gt; gem to have pandoc render the markdown, along with a few other custom plugins, I cannot take advantage of Github’s automated build for Jekyll and have instead relied on the trick of having Travis-CI build and deploy the site. Adding automated knitr building to the mix will make this too heavy for travis, even for more modular notebooks. Instead, I am relying on local building, together with automated builds from my own server running a Drone CI instance. More on this in a separate post.&lt;/p&gt;
&lt;h2 id=&quot;site-assets-templates&quot;&gt;Site assets, templates&lt;/h2&gt;
&lt;p&gt;Individual notebook repositories are thus much more light-weight. All css assets are in the root &lt;code&gt;cboettig.github.io&lt;/code&gt; repository or already provided by external CDNs (such as the FontAwesome icons or MathJax, and Bootstrap javascript). However, it is necessary that both all annual notebook repositories and the base repo have the Jekyll &lt;code&gt;_layouts&lt;/code&gt; and &lt;code&gt;_includes&lt;/code&gt; files required to template and build the pages. This is unfortunate, since it means maintaining multiple copies of the same file, but I haven’t figured out an easy way around it.&lt;/p&gt;
&lt;h2 id=&quot;pruning-history&quot;&gt;Pruning history&lt;/h2&gt;
&lt;p&gt;In breaking &lt;code&gt;labnotebook&lt;/code&gt; into component repos by year, I only want to preserve the history of that year, thus keeping the repositories small. This is particularly important for the root repo, &lt;code&gt;cboettig.github.io&lt;/code&gt;, since it will remain active.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edit &lt;code&gt;_config.yml&lt;/code&gt; to remove &lt;code&gt;/:year&lt;/code&gt; from &lt;code&gt;_config.yml&lt;/code&gt; (the repository name will automatically be used as part of the URL)&lt;/li&gt;
&lt;li&gt;delete all posts from different years (preferable to just wait until deleting their history, which will remove the files as well), e.g. for 2014:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;ot&quot;&gt;files=&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;`echo&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;{_posts/2008-*,_posts/2009-*,_posts/2010-*,_posts/2011-*,_posts/2012-*,_posts/2013-*}&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;git&lt;/span&gt; filter-branch --index-filter &lt;span class=&quot;st&quot;&gt;&amp;quot;git rm -rf --cached --ignore-unmatch &lt;/span&gt;&lt;span class=&quot;ot&quot;&gt;$files&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; HEAD&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and remove the temporary backups immediately so that repository actually shrinks in size:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git update-ref -d refs/original/refs/heads/master
git reflog expire --expire=now --all
git gc --prune=now&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is more important in the root repository, since this will remain active. If the annual notebook entry repositories have some extra stuff in their &lt;code&gt;.git&lt;/code&gt; history it isn’t such an issue since they no longer need to grow or be moved around as much. (See this &lt;a href=&quot;http://stackoverflow.com/questions/2100907&quot;&gt;SO on rewriting git history&lt;/a&gt;.)&lt;/p&gt;
&lt;h2 id=&quot;my-progress-notes-during-the-remapping&quot;&gt;My progress notes during the remapping:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[x] delete the CNAME file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[x] delete all the relatively static pages files that will be hosted directly from &lt;code&gt;cboettig.github.io&lt;/code&gt; (&lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;research.md&lt;/code&gt;, etc., but not dynamically created &lt;code&gt;tags.html&lt;/code&gt; etc).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[x] adjust &lt;code&gt;repo:&lt;/code&gt; in &lt;code&gt;_config.yml&lt;/code&gt; to match the repository year. This will automatically fix the sha and history links in the sidebar.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[x] Other tweaks to the sidebar: &lt;code&gt;site.repo&lt;/code&gt; liquid must be added to categories, tags, next, and previous links.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[x] Automated deploy for active and root repositories.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[x] Plan for &lt;code&gt;labnotebook&lt;/code&gt; repo. History is preserved, but issues, github stars, etc. Use as template for the new years?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[x] Activate! Remove CNAME from &lt;code&gt;labnotebook&lt;/code&gt; repo, add &lt;code&gt;www&lt;/code&gt; CNAME to &lt;code&gt;cboettig.github.io&lt;/code&gt;. Consider removing &lt;code&gt;gh-pages&lt;/code&gt; branch of lab-notebook?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[x] Fix / workaround for the root atom feeds.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[x] Syncing assets, layout, and deploy scripts? Perhaps it is best to allow these to diverge and newer notebooks to look different than older ones?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
</feed>

    </article>
  </div>
</div>



      <footer class="footer">

<!--************** FOAF information to social networks ***************************** -->
  <div class="row">
    <div class="col-md-3 col-xs-4 socialicons" style="font-size:20px" typeof="foaf:Person" about="http://www.carlboettiger.info#me">
      <p>
          <script type="text/javascript" src="/assets/js/obfuscate-email-link.js"></script> 

          <a rel="foaf:account" href="https://twitter.com/cboettig" 
             onclick="recordOutboundLink(this, 'Outbound Links', 'Twitter'); 
             return false;"><span class="showtooltip" title="follow me on twitter (reading, discussing)"><i class="fa fa-twitter"></i></span></a> 

          <a rel="foaf:account" href="https://github.com/cboettig" 
             onclick="recordOutboundLink(this, 'Outbound Links', 'Github'); 
             return false;"><span class="showtooltip" title="follow me on Github (code, research)"><i class="fa fa-github"></i></span></a>
      <!--
          <a rel="foaf:account" href="https://plus.google.com/" 
             onclick="recordOutboundLink(this, 'Outbound Links', 'GPlus'); 
             return false;"><i class="fa fa-google-plus"></i></a>

          <a rel="foaf:account" href="http://www.mendeley.com/profiles/carl-boettiger" 
             onclick="recordOutboundLink(this, 'Outbound Links', 'Mendeley'); 
             return false;"><img src="/assets/img/icon-mendeley.png" /></a> 

           citations on google-scholar

           stackoverflow
      -->
      <a rel="foaf:weblog" type="application/atom+xml" href="/blog.xml"  
         class="showtooltip" title="RSS feeds for my blog-style entries. See the feed on my lab notebook (/atom.xml) to follow all entries instead." 
         onclick="recordOutboundLink(this, 'Outbound Links', 'RSS'); 
         return false;"><i class="fa fa-rss"></i></a>
       </p>
    </div>

    
    <!--**************** End social links **************************** -->


    <div class="col-md-4 col-md-offset-1 col-xs-4">
      <p><a onclick="recordOutboundLink(this, 'Outbound Links', 'ONS_claim'); return false;" href="http://onsclaims.wikispaces.com/"><img src="/assets/img/ons-aci2-icon.svg" alt="ONS" class="showtooltip" title="An Open Notebook Science (ONS) project claim: Entry provides all content (AC) immediately (I) or without significant delay.  See link for details"/></a></p>
    </div>


    <div class="col-md-3 col-md-offset-1 col-xs-4">
      <p>
      <a rel="license" property="http://creativecommons.org/ns#license" href="http://creativecommons.org/publicdomain/zero/1.0/" onclick="recordOutboundLink(this, 'Outbound Links', 'CC0'); return false;"><img src="/assets/img/cc-zero.svg" alt="CC0"/></a> 
      </p>
    </div>
  </div>


  
<!-- COinS metadata (for citation managers like Zotero etc), goes in body text -->
  <span
      class="Z3988" 
      title="ctx_ver=Z39.88-2004
      &amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Adc
      &amp;rfr_id=info%3Asid%2Focoins.info%3Agenerator
      &amp;rft.title=Atom Feed
      &amp;rft.creator=Carl Boettiger
      &amp;rft.date=
      &amp;rft.language=EN
      &amp;rft.rights=CC0
      &amp;rft_id=http://www.carlboettiger.info/blog.xml">
  </span>


</footer>




          <!-- Le javascript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->

    <!-- JQuery, used on a few pages (still?) -->
    <!-- <script type="text/javascript" src="/assets/js/jquery.js"></script> -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
    <!-- Equations using MathJax -->
    <script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    <script type="text/x-mathjax-config"> MathJax.Hub.Config({ TeX: { equationNumbers: {autoNumber: "all"} } });       </script>
    <!-- Twitter Bootstrap Javascript -->
    <!--  <script src="/assets/js/bootstrap.min.js"></script> -->
    <script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>


    

        <script type="text/javascript">
          var _gaq = _gaq || [];
          _gaq.push(['_setAccount', 'UA-18401403-1']);
          _gaq.push(['_trackPageview']);
          (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
          })();
  </script>



<script type="text/javascript">
function recordOutboundLink(link, category, action) {
  try {
    var pageTracker=_gat._getTracker("UA-18401403-1");
    pageTracker._trackEvent(category, action);
    setTimeout('document.location = "' + link.href + '"', 100)
  }catch(err){}
}
</script>




    </div>
  </body>
</html>
   
